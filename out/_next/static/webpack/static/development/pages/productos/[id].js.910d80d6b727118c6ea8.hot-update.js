webpackHotUpdate("static/development/pages/productos/[id].js",{

/***/ "./pages/productos/[id].js":
/*!*********************************!*\
  !*** ./pages/productos/[id].js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/styled-base */ "./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/router */ "./node_modules/next/dist/client/router.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var date_fns_formatDistanceToNow__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! date-fns/formatDistanceToNow */ "./node_modules/date-fns/esm/formatDistanceToNow/index.js");
/* harmony import */ var date_fns_locale__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! date-fns/locale */ "./node_modules/date-fns/esm/locale/index.js");
/* harmony import */ var _firebase__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../firebase */ "./firebase/index.js");
/* harmony import */ var _components_layout_Layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../components/layout/Layout */ "./components/layout/Layout.js");
/* harmony import */ var _components_layout_404__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../components/layout/404 */ "./components/layout/404.js");
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var _components_ui_Formulario__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../components/ui/Formulario */ "./components/ui/Formulario.js");
/* harmony import */ var _components_ui_Boton__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../components/ui/Boton */ "./components/ui/Boton.js");





var _this = undefined,
    _jsxFileName = "/Users/pedro/producthuntnext/pages/productos/[id].js";

var __jsx = react__WEBPACK_IMPORTED_MODULE_4___default.a.createElement;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }













var ContenedorProducto = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_3__["default"])("div", {
  target: "ekj0d3r0",
  label: "ContenedorProducto"
})(false ? undefined : {
  name: "1feckq",
  styles: "@media (min-width:768px){display:grid;grid-template-columns:2fr 1fr;column-gap:2rem;}",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var CreadorProducto = Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_3__["default"])("p", {
  target: "ekj0d3r1",
  label: "CreadorProducto"
})(false ? undefined : {
  name: "2vahkx",
  styles: "padding:.5rem 2rem;background-color:#DA552F;color:#fff;text-transform:uppercase;font-weight:bold;display:inline-block;text-align:center;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

var _ref = false ? undefined : {
  name: "1soej37-Producto",
  styles: "text-align:center;margin-top:5rem;;label:Producto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref2 = false ? undefined : {
  name: "10zjnum-Producto",
  styles: "margin:2rem 0;;label:Producto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref3 = false ? undefined : {
  name: "z1kfx5-Producto",
  styles: "border:1px solid #e1e1e1;padding:2rem;;label:Producto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref4 = false ? undefined : {
  name: "1nv8zj3-Producto",
  styles: "font-weight:bold;;label:Producto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref5 = false ? undefined : {
  name: "1hbd2x1-Producto",
  styles: "margin-top:5rem;;label:Producto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref6 = false ? undefined : {
  name: "11xh944-Producto",
  styles: "text-align:center;;label:Producto;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Producto = function Producto() {
  // state del componente
  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_4__["useState"])({}),
      producto = _useState[0],
      guardarProducto = _useState[1];

  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_4__["useState"])(false),
      error = _useState2[0],
      guardarError = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_4__["useState"])({}),
      comentario = _useState3[0],
      guardarComentario = _useState3[1];

  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_4__["useState"])(true),
      consultarDB = _useState4[0],
      guardarConsultarDB = _useState4[1]; // Routing para obtener el id actual


  var router = Object(next_router__WEBPACK_IMPORTED_MODULE_5__["useRouter"])();
  var id = router.query.id; // context de firebase

  var _useContext = Object(react__WEBPACK_IMPORTED_MODULE_4__["useContext"])(_firebase__WEBPACK_IMPORTED_MODULE_8__["FirebaseContext"]),
      firebase = _useContext.firebase,
      usuario = _useContext.usuario;

  Object(react__WEBPACK_IMPORTED_MODULE_4__["useEffect"])(function () {
    if (id && consultarDB) {
      var obtenerProducto = function obtenerProducto() {
        var productoQuery, producto;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.async(function obtenerProducto$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.awrap(firebase.db.collection('productos').doc(id));

              case 2:
                productoQuery = _context.sent;
                _context.next = 5;
                return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.awrap(productoQuery.get());

              case 5:
                producto = _context.sent;

                if (producto.exists) {
                  guardarProducto(producto.data());
                  guardarConsultarDB(false);
                } else {
                  guardarError(true);
                  guardarConsultarDB(false);
                }

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, null, null, null, Promise);
      };

      obtenerProducto();
    }
  }, [id]);
  if (Object.keys(producto).length === 0 && !error) return 'Cargando...';
  var comentarios = producto.comentarios,
      creado = producto.creado,
      descripcion = producto.descripcion,
      empresa = producto.empresa,
      nombre = producto.nombre,
      url = producto.url,
      urlimagen = producto.urlimagen,
      votos = producto.votos,
      creador = producto.creador,
      haVotado = producto.haVotado; // Administrar y validar los votos

  var votarProducto = function votarProducto() {
    if (!usuario) {
      return router.push('/login');
    } // Verificar si el usuario actual ha votado


    if (haVotado.includes(usuario.uid)) return; // obtener y sumar un nuevo voto

    var nuevoTotal = votos + 1; // guardar el ID del usuario que ha votado

    var nuevoHaVotado = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(haVotado), [usuario.uid]); //  Actualizar en la BD

    firebase.db.collection('productos').doc(id).update({
      votos: nuevoTotal,
      haVotado: nuevoHaVotado
    }); // Actualizar el state

    guardarProducto(_objectSpread({}, producto, {
      votos: nuevoTotal
    }));
    guardarConsultarDB(true); // hay un voto, por lo tanto consultar a la BD
  }; // Funciones para crear comentarios


  var comentarioChange = function comentarioChange(e) {
    guardarComentario(_objectSpread({}, comentario, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])({}, e.target.name, e.target.value)));
  }; // Identifica si el comentario es del creador del producto


  var esCreador = function esCreador(id) {
    if (creador.id == id) {
      return true;
    }
  };

  var agregarComentario = function agregarComentario(e) {
    e.preventDefault();

    if (!usuario) {
      return router.push('/login');
    } // información extra al comentario


    comentario.usuarioId = usuario.uid;
    comentario.usuarioNombre = usuario.displayName; // Tomar copia de comentarios y agregarlos al arreglo

    var nuevosComentarios = [].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(comentarios), [comentario]); // Actualizar la BD

    firebase.db.collection('productos').doc(id).update({
      comentarios: nuevosComentarios
    }); // Actualizar el state

    guardarProducto(_objectSpread({}, producto, {
      comentarios: nuevosComentarios
    }));
    guardarConsultarDB(true); // hay un COMENTARIO, por lo tanto consultar a la BD
  }; // función que revisa que el creador del producto sea el mismo que esta autenticado


  var puedeBorrar = function puedeBorrar() {
    if (!usuario) return false;

    if (creador.id === usuario.uid) {
      return true;
    }
  }; // elimina un producto de la bd


  var eliminarProducto = function eliminarProducto() {
    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.async(function eliminarProducto$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (usuario) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return", router.push('/login'));

          case 2:
            if (!(creador.id !== usuario.uid)) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", router.push('/'));

          case 4:
            _context2.prev = 4;
            _context2.next = 7;
            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_2___default.a.awrap(firebase.db.collection('productos').doc(id)["delete"]());

          case 7:
            router.push('/');
            _context2.next = 13;
            break;

          case 10:
            _context2.prev = 10;
            _context2.t0 = _context2["catch"](4);
            console.log(_context2.t0);

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, [[4, 10]], Promise);
  };

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(_components_layout_Layout__WEBPACK_IMPORTED_MODULE_9__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 168,
      columnNumber: 9
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, error ? Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(_components_layout_404__WEBPACK_IMPORTED_MODULE_10__["default"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 170,
      columnNumber: 27
    }
  }) : Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("div", {
    className: "contenedor",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 171,
      columnNumber: 21
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("h1", {
    css: _ref,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 172,
      columnNumber: 25
    }
  }, nombre, " "), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(ContenedorProducto, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 177,
      columnNumber: 25
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("div", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 178,
      columnNumber: 29
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("p", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 179,
      columnNumber: 33
    }
  }, "Publicado hace: ", Object(date_fns_formatDistanceToNow__WEBPACK_IMPORTED_MODULE_6__["default"])(new Date(creado), {
    locale: date_fns_locale__WEBPACK_IMPORTED_MODULE_7__["es"]
  }), " "), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("p", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 180,
      columnNumber: 33
    }
  }, "Por: ", creador.nombre, " de ", empresa, " "), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("img", {
    src: urlimagen,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 181,
      columnNumber: 33
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("p", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 182,
      columnNumber: 33
    }
  }, descripcion), usuario && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(react__WEBPACK_IMPORTED_MODULE_4___default.a.Fragment, null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("h2", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 186,
      columnNumber: 37
    }
  }, "Agrega tu comentario"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("form", {
    onSubmit: agregarComentario,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 187,
      columnNumber: 37
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(_components_ui_Formulario__WEBPACK_IMPORTED_MODULE_12__["Campo"], {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 190,
      columnNumber: 41
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("input", {
    type: "text",
    name: "mensaje",
    onChange: comentarioChange,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 191,
      columnNumber: 45
    }
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(_components_ui_Formulario__WEBPACK_IMPORTED_MODULE_12__["InputSubmit"], {
    type: "submit",
    value: "Agregar Comentario",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 197,
      columnNumber: 41
    }
  }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("h2", {
    css: _ref2,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 205,
      columnNumber: 33
    }
  }, "Comentarios"), comentarios.length === 0 ? "Aún no hay comentarios" : Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("ul", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 210,
      columnNumber: 37
    }
  }, comentarios.map(function (comentario, i) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("li", {
      key: "".concat(comentario.usuarioId, "-").concat(i),
      css: _ref3,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 212,
        columnNumber: 45
      }
    }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("p", {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 219,
        columnNumber: 49
      }
    }, comentario.mensaje), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("p", {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 220,
        columnNumber: 49
      }
    }, "Escrito por:", Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("span", {
      css: _ref4,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 221,
        columnNumber: 53
      }
    }, '', " ", comentario.usuarioNombre)), esCreador(comentario.usuarioId) && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(CreadorProducto, {
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 229,
        columnNumber: 88
      }
    }, "Es Creador"));
  }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("aside", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 237,
      columnNumber: 29
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(_components_ui_Boton__WEBPACK_IMPORTED_MODULE_13__["default"], {
    target: "_blank",
    bgColor: "true",
    href: url,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 238,
      columnNumber: 33
    }
  }, "Visitar URL"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("div", {
    css: _ref5,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 246,
      columnNumber: 33
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])("p", {
    css: _ref6,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 251,
      columnNumber: 37
    }
  }, votos, " Votos"), usuario && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(_components_ui_Boton__WEBPACK_IMPORTED_MODULE_13__["default"], {
    onClick: votarProducto,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 256,
      columnNumber: 41
    }
  }, "Votar")))), puedeBorrar() && Object(_emotion_core__WEBPACK_IMPORTED_MODULE_11__["jsx"])(_components_ui_Boton__WEBPACK_IMPORTED_MODULE_13__["default"], {
    onClick: eliminarProducto,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 267,
      columnNumber: 29
    }
  }, "Eliminar Producto"))));
};

/* harmony default export */ __webpack_exports__["default"] = (Producto);

/***/ })

})
//# sourceMappingURL=[id].js.910d80d6b727118c6ea8.hot-update.js.map